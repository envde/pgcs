using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using PgCs.Common.CodeGeneration;
using PgCs.Common.SchemaAnalyzer.Models.Tables;
using PgCs.Common.SchemaAnalyzer.Models.Types;
using PgCs.Common.SchemaGenerator.Models.Options;
using PgCs.Common.Services;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace PgCs.SchemaGenerator.Services;

/// <summary>
/// Строитель синтаксических деревьев C# с использованием Roslyn
/// </summary>
public sealed class SyntaxBuilder(ITypeMapper typeMapper, INameConverter nameConverter)
{
    /// <summary>
    /// Создает compilation unit с namespace для класса таблицы или enum
    /// </summary>
    public CompilationUnitSyntax BuildCompilationUnit(
        string namespaceName,
        ClassDeclarationSyntax classDeclaration,
        IEnumerable<string> usings)
    {
        return RoslynSyntaxHelpers.BuildCompilationUnit(namespaceName, classDeclaration, usings);
    }

    /// <summary>
    /// Создает класс для таблицы
    /// </summary>
    public ClassDeclarationSyntax BuildTableClass(
        TableDefinition table,
        SchemaGenerationOptions options)
    {
        var className = nameConverter.ToClassName(table.Name);

        var classDeclaration = ClassDeclaration(className)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .AddModifiers(Token(SyntaxKind.SealedKeyword))
            .AddModifiers(Token(SyntaxKind.RecordKeyword));

        // Добавляем XML комментарий
        if (!string.IsNullOrWhiteSpace(table.Comment))
        {
            classDeclaration = classDeclaration.WithLeadingTrivia(
                CreateXmlComment(table.Comment));
        }

        // Добавляем свойства для каждой колонки
        foreach (var column in table.Columns)
        {
            var property = BuildProperty(column);
            classDeclaration = classDeclaration.AddMembers(property);
        }

        return classDeclaration;
    }

    /// <summary>
    /// Создает свойство для колонки
    /// </summary>
    public PropertyDeclarationSyntax BuildProperty(ColumnDefinition column)
    {
        var propertyName = nameConverter.ToPropertyName(column.Name);
        var propertyType = typeMapper.MapType(column.DataType, column.IsNullable, column.IsArray);

        var property = PropertyDeclaration(
                ParseTypeName(propertyType),
                Identifier(propertyName))
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .AddModifiers(Token(SyntaxKind.RequiredKeyword))
            .AddAccessorListAccessors(
                AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
                    .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)),
                AccessorDeclaration(SyntaxKind.InitAccessorDeclaration)
                    .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)));

        // Добавляем XML комментарий
        if (!string.IsNullOrWhiteSpace(column.Comment))
        {
            property = property.WithLeadingTrivia(CreateXmlComment(column.Comment));
        }

        return property;
    }

    /// <summary>
    /// Создает enum для PostgreSQL enum типа
    /// </summary>
    public EnumDeclarationSyntax BuildEnum(TypeDefinition enumType)
    {
        var enumName = nameConverter.ToClassName(enumType.Name);

        var enumDeclaration = EnumDeclaration(enumName)
            .AddModifiers(Token(SyntaxKind.PublicKeyword));

        // Добавляем XML комментарий
        if (!string.IsNullOrWhiteSpace(enumType.Comment))
        {
            enumDeclaration = enumDeclaration.WithLeadingTrivia(
                CreateXmlComment(enumType.Comment));
        }

        // Добавляем значения enum

        return enumType.EnumValues.Select(nameConverter.ToEnumMemberName)
            .Select(memberName => EnumMemberDeclaration(Identifier(memberName)))
            .Aggregate(enumDeclaration, (current, member) => current.AddMembers(member));
    }

    /// <summary>
    /// Создает compilation unit для enum
    /// </summary>
    public CompilationUnitSyntax BuildEnumCompilationUnit(
        string namespaceName,
        EnumDeclarationSyntax enumDeclaration)
    {
        var fileScopedNamespace = FileScopedNamespaceDeclaration(IdentifierName(namespaceName))
            .AddMembers(enumDeclaration);

        // Normalize для правильного форматирования, потом добавляем header
        var compilationUnit = CompilationUnit()
            .AddMembers(fileScopedNamespace)
            .NormalizeWhitespace();

        // Создаем header с информацией о генерации
        var header = RoslynSyntaxHelpers.CreateAutoGeneratedHeader();

        return compilationUnit.WithLeadingTrivia(header);
    }

    /// <summary>
    /// Создает XML комментарий для документации используя Roslyn XML API
    /// </summary>
    private static SyntaxTriviaList CreateXmlComment(string comment)
    {
        return RoslynSyntaxHelpers.CreateXmlComment(comment);
    }

    /// <summary>
    /// Собирает список required usings для типов колонок
    /// </summary>
    public IEnumerable<string> GetRequiredUsings(IEnumerable<ColumnDefinition> columns)
    {
        var usings = new HashSet<string>();

        foreach (var column in columns)
        {
            var requiredNamespace = typeMapper.GetRequiredNamespace(column.DataType);
            if (requiredNamespace != null)
            {
                usings.Add(requiredNamespace);
            }
        }

        return usings;
    }
}